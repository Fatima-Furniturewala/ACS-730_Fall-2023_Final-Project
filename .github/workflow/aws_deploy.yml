name: "Terraform final project"

on:
  push:
    branches:
      - dev
      - prod
      - staging
  pull_request:
    branches:
      - dev
      - prod
  pull_request_target:
    branches:
      - dev
      - prod

permissions:
  contents: read
  pull-requests: write

jobs:
  terraform:
    name: "terraform"
    runs-on: ubuntu-latest
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_SESSION_TOKEN: ${{ secrets.AWS_SESSION_TOKEN }}

    steps:
      - name: Set Environment Variables
        run: |
          if [ "$GITHUB_REF" == "refs/heads/dev" ]; then
            export ENVIRONMENT=dev
          elif [ "$GITHUB_REF" == "refs/heads/prod" ]; then
            export ENVIRONMENT=prod
          fi
        shell: bash

      - name: Use Dynamic Environment Variable
        run: echo "Running Terraform for $ENVIRONMENT environment"

      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.1.9
          terraform_wrapper: true

      - name: Loop over working directories
        run: |
          for dir in prod/network prod/webservers prod/lb; do
            echo "Working on $dir"
            cd $dir
            terraform_init_id="init-$dir"
            terraform_fmt_id="fmt-$dir"
            terraform_validate_id="validate-$dir"
            terraform_plan_id="plan-$dir"

            # Terraform Init
            terraform init
            

            # Terraform fmt
            terraform fmt || true # Continue on error
            echo "::set-output name=fmt-$dir"

            # Terraform Validate
            terraform validate -no-color
            echo "::set-output name=validate-$dir"

            # Terraform Plan
            terraform plan -input=false -no-color -out tf.plan || true # Continue on error
            echo "::set-output name=plan-$dir"

            # Get result
            result=$(terraform validate -no-color)
            echo "$result"
            echo "::set-output name=result::$result"

            # Terraform Show
            terraform show -no-color tf.plan 2>&1 > /tmp/plan.txt || true # Continue on error
            echo "::set-output name=show::${{ steps.show.outcome }}"

           

            # Terraform Apply (if needed)
            if [ "$GITHUB_REF" == "refs/heads/main" ] && [ "${{ github.event_name }}" == "pull_request" || "${{ github.event_name }}" == "push" || "${{ github.event_name }}" == "push" && "${{ github.event.pull_request.merged }}" == "true" ]; then
              terraform apply -input=false tf.plan || true # Continue on error
            fi
            cd ..
          done